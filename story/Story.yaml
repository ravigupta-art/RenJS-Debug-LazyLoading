start:
  - show street_morning: WITH FADE CONTINUE
  - show tap_gesture: AT 400,157 WITH FADE
  - animate tap_gesture:
    spritesheet: loop LOOPED
  - wait: click
  - show deuzi: normal AT CENTER WITH FADE
  - wait: 300
  - deuzi says: Hello, are you the new student?
  - deuzi says happy: Welcome to our Tutorial Game!
  - deuzi says: My name is Deuzilene and I'll be your guide.
  - deuzi says normal: So you want to make a Visual Novel?
  - deuzi says: With RenJS you can easily make games just like this one.
  - deuzi says: RenJS is inspired by Ren'Py and based on PhaserJS.
  - deuzi says: If you are familiar with any of those you have an advantage.
  - deuzi says: And if not...
  - deuzi says happy: No problem!
  - deuzi says: RenJS is made so the text of your story is written intuitively like a movie script.
  - deuzi says normal: Once you learn the structure, there's no limit to what you can create.
  - deuzi says: Let's get inside and start right away.
  - hide ALL: WITH FADE
  - scene: enterSchool

# enterSchool:
#   - show school_morning: WITH FADE CONTINUE
#   - show deuzi: WITH FADE
#   - deuzi says: Are you ready?
#   - call SHOWTITLE: 
#     title: Lesson 1
#     subtitle: The basics 
#   - deuzi says: First things first, let's see what we need to start.
#   - deuzi says: RenJS doesn't come or is tied to any particular IDE (integrated development environment).
#   - deuzi says: That is, a program to read and edit the files of the game, like your story script.
#   - deuzi says: It doesn't have to be anything big or expensive. It can be any low level text processor you already have installed.
#   - deuzi says happy: But me, I like to use Brackets, a free and open source text editor, that comes with support for web development.
#   - deuzi says: You can find a link to download the Brackets editor below.
#   - deuzi says normal: Another thing you will need is RenJS itself.
#   - deuzi says: RenJS is the library that will manage the flow, assets and interactivity of your game.
#   - deuzi says: And finally, you will need your game script, in a way that the library can understand.
#   - deuzi says: To make things easy, RenJS comes with a Quickstart.
#   - deuzi says: A Quickstart is a minimal game already set up for you to test and even use as a base for your games.
#   - deuzi says: You can find a link to download it in this same page.
#   - deuzi says: The game files will include the RenJS library, and the story script, configuration and assets.
#   - deuzi says: So, have you downloaded it yet?
#   - choice:
#     - I have it!:
#       - deuzi says happy: Great! What a hardworking student!
#     - Not yet:
#       - show deuzi: angry
#       - deuzi says angry: What are you waiting for!?
#       - deuzi says normal: Go do it, I'll wait...
#       - choice:
#         - I have it!:
#           - deuzi says happy: Good! Let's continue.
#   - deuzi says normal: Now, open the root directory of the Quickstart.
#   - deuzi says: It should look like this.
#   - show deuzi: AT LEFT WITH MOVE CONTINUE
#   - show folders: AT 550,300 WITH FADE
#   - deuzi says: There are four folders and one HTML file.
#   - deuzi says: RenJS is web based, that means the game runs as a webpage.
#   - deuzi says: You can then embed the game in any other webpage, or package it as a mobile or desktop app.
#   - deuzi says: Webpages are HTML files, and index.html is the page that contains the game.
#   - deuzi says: To play and test the game locally, you need to open it as a webpage too.
#   - deuzi says: What does it mean? 
#   - deuzi says: It means you need a local server to deliver your page, as if it was published in the internet.
#   - deuzi says: This sounds complicated, but it can be done easily with the right tools.
#   - deuzi says: The easiest way is to use an IDE that lets you both edit your files, and publish them locally.
#   - deuzi says happy: The recommended editor I mentioned before, Brackets, lets you do just that. 
#   - deuzi says: So, your second challenge is now to run the Quickstart locally, either through Brackets or in any other way you find.
#   - deuzi says: Did you manage to do it?
#   - choice:
#     - Of course!:
#       - deuzi says happy: Perfect!
#     - It's too hard:
#       - deuzi says happy: Don't worry, starting is always hard, but you'll get there.
#       - deuzi says: You will find below a link to a video on how to run the Quickstart step by step.
#       - deuzi says: If you still have troubles after that...
#       - deuzi says: RenJS has a growing community of writers and developers that can help you.
#       - deuzi says: You will find below also links to the RenJS forums and an invitation to the discord channel.
#       - deuzi says: Once you manage to run the Quickstart, come back and we'll continue with the class.
#       - choice:
#         - Done!:
#           - deuzi says happy: Perfect!
#   - deuzi says normal: Then we can continue with the class.
#   - deuzi says: Let's explore the contents of each directory.
#   - deuzi says: RenJS contains the library, renjs.js, and another file, boot.js that takes care of starting the game.
#   - deuzi says: Normally, you don't need to do anything with these files, but there's one thing you need to know.
#   - deuzi says: To launch the game, inside of boot.js, the game takes a few low level configuration parameters.
#   - show lessonRenJSConfig: AT 520,300
#   - deuzi says: The most important is the game screen resolution. The Tutorial and Quickstart are both in the same resolution, 800x600 pixels.
#   - deuzi says: But you can make games in any resolution you like, and if you do, you will need to change it right there with the 'w' and 'h' parameters.
#   - deuzi says: The second important thing you might need to modify in this file is where to find the story itself.
#   - deuzi says: The parameters 'guiConfig', 'storySetup', 'storyConfig' and 'storyText' are just for that.
#   - deuzi says: All of these point to a YAML file inside the 'story' directory, and they refer to the files that make up your story.
#   - deuzi says: These files can be named whatever you want, but you would need to modify the file path and name here.
#   - deuzi says: But the most important thing here is that 'storyText' doesn't just point to a file, but a list of files.
#   - deuzi says: That means that you can have as many story text files as you want. In this way, you can organize your story as you like.
#   - deuzi says: And all you need to do when you add a new file, is to come and add it to the configuration object in the boot.js file.
#   - deuzi says: There are a few other parameters there that you might want to modify if you really know what you're doing. But if you leave them as they are, it should be fine.
#   - hide lessonRenJSConfig: 
#   - deuzi says: Let's see the next directory. Plugins contains new scripts that you might want to use during your game. 
#   - deuzi says: For example, you can code your own special effects, mini games or whatever you want, and they can be added seamlessly to the game with plugins.
#   - deuzi says: If you're making a simple game, you shouldn't worry about any of this though.
#   - deuzi says: The files that concern you as a writer are inside the story and assets directory.
#   - deuzi says: The assets directory contains the images and sounds that make up the game.
#   - deuzi says: Among these images you will find the backgrounds and characters of the story, but also the Graphical User Interface (GUI) assets.
#   - deuzi says: Going back to the main directories, the last one is called story.
#   - deuzi says: If you take a look, you will find four files with the extension yaml.
#   - deuzi says: These YAML files are what you will use to make your game.
#   - deuzi says: YAML is a human readable data serialization language.
#   - deuzi says: That means that the files contain data in a structure that you and most humans can read and write easily.
#   - deuzi says: In any case, the most important thing about YAML files is...
#   - deuzi says angry: Indentation is super important! If you screw up the indentation the game won't even load!
#   - deuzi says: If you're wondering what's indentation, I'll tell you.
#   - deuzi says: It's the amount of whitespaces from the start of the line on a given line of text.
#   - deuzi says: Go ahead and take a look at Setup.yaml, as an example.
#   - deuzi says: Everything is perfectly indented, each logical level adding further whitespaces.
#   - deuzi says angry: So be very careful about it. Only two spaces per level!
#   - hide folders: WITH FADE CONTINUE
#   - show deuzi: AT CENTER WITH MOVE
#   - deuzi says normal: Ok, that was a lot of information, don't you think?
#   - choice:
#     - Yes, I'm already tired:
#       - deuzi says happy: I was hoping you'd say that!
#       - deuzi says: You can save from the quick menu here on the side and return later!
#     - No, I want to know more:
#       - deuzi says happy: I knew it!
#       - deuzi says: I have a feeling you're not stopping until you write your first story.
#       - deuzi says: Isn't that exciting?
#   - deuzi says normal: All right, I'm going to take a break anyways.
#   - deuzi says: You will see how to write each of these files in the next lessons.
#   - deuzi says: But I'm leaving you in good hands.
#   - deuzi says happy: Good luck!
#   - hide deuzi: WITH FADE
#   - scene: storySetup

# storySetup:
#   - show jair: WITH FADE
#   - jair says: So you're the new student.
#   - jair says: I've heard a lot about you from Deuzi.
#   - jair says: She gets easily excited.
#   - jair says angry: But with me, you'll have to prove yourself first.
#   - jair says: Do you have what it takes to be a visual novel writer?
#   - jair says normal: We'll see.
#   - jair says: I'm Jair, btw.
#   - jair says: But you should know that, since my name is on display right above the text box.
#   - jair says: I'm here to show you how to setup your story.
#   - call SHOWTITLE: 
#     title: Lesson 2
#     subtitle: Setting up the story
#   - jair says: All the setup is contained in the Setup.yaml file.
#   - jair says: What this means is...
#   - jair says: All your characters, music, sfx and everything else you're planning to use on the story,
#   - jair says: needs to be declared on this file.
#   - jair says: That means you need to know everything before you even start to write the story.
#   - jair says: What kind of writer doesn't though...
#   - wait: 300
#   - jair says : Just joking!
#   - jair says happy: You won't always know what things you need for a story.
#   - jair says: So every time you add something, remember to also add it to the setup file.
#   - jair says normal: As Deuzi already said, we'll be using the Quickstart as a base.
#   - jair says: But this game comes with the bare minimum.
#   - jair says: One background and one character, Deuzilene herself.
#   - jair says: That would make a poor example, so let's learn by doing.
#   - jair says: And for that, we will need more assets. Luckily, we have something on hand for that.
#   - jair says: You'll find a link below to download the Tutorial Assets Pack.
#   - jair says: Download this asset pack and extract it inside the assets directory.
#   - jair says: The assets themselves are inside their own directory, tutorial_assets_pack.
#   - jair says: So what is this asset pack?
#   - jair says: Exactly what it says on the tin. The assets used on this tutorial game.
#   - jair says: Can you find me among the files?
#   - choice:
#     - Who are the other characters?:
#       - jair says angry: You just barely started today, you'll meet them when it's due.
#     - Yes, I found you!:
#       - jair says happy: I'm so handsome.
#   - jair says normal: Anyway... Let's continue with the class.
  
#   - jair says: Find the Setup.yaml and take a look at it. 
#   - jair says: The setup file is organized by type of game element.
#   - jair says: The backgrounds with the backgrounds the characters with the characters.
#   - jair says: Each type of element is declared in their own special way. 
#   - jair says: But the main thing here is to keep everything tidy.
#   - jair says happy: I bet Deuzi already told you all about indentation.
#   - jair says normal: I like to tease her about this obsession of hers...
#   - jair says angry: But she's right, it's really important.
#   - jair says normal: To put this in practice, let's add a new background.
#   - show jair: AT RIGHT WITH MOVE CONTINUE
#   - show setupbg: AT 400,320 WITH FADE
#   - jair says: First, locate the 'background' key word. It should be easy, it's in the first line.
#   - jair says: There are three backgrounds declared here, each in their own line, indented by two spaces.
#   - jair says: You have to keep this structure.
#   - jair says: Each background has a tag, that's the name that will be used to refer to that particular background on the story.
#   - jair says: And they also have a path to where the background image is located, relative to the root of the game.
#   - jair says: If you change the tag of a background, you will have to manually update the tag in the story, in every instance it's used.
#   - jair says: But if you change the path to the image, the image will be changed without having to modify the story.
#   - jair says: In this way, you can use placeholder images, like sketches, to write your game before you have the final assets.
#   - jair says: But let's do some practical work.
#   - jair says: Go to the tutorial assets directory and let's explore the available backgrounds. 
#   - jair says happy: Seems like we have an afternoon for the school.
#   - jair says normal: Add a new line to the backgrounds section of the setup to add it to the game.
#   - jair says: The key name, or tag, can't have spaces and it should be meaningful, so it will be easier to use in the script. For example, 'school_afternoon'.
#   - jair says: Then the path should be the directory hierarchy from the root of the game to the image file.
#   - jair says: If you go to the Story.yaml file, the script of your story, and change the old background tag to the new one you just added.
#   - jair says: Then when you run the game again, you should see the new background.
#   - jair says: Don't worry too much about how to write the story for now, you will soon have another class to see all of it.
#   - hide setupbg: WITH FADE
#   - jair says: Anyway, that background should be loaded into this game too, let's see...
#   - show school_afternoon: WITH FUSION
#   - jair says happy: Wow, I didn't realise it was so late. Time to go home!
#   - show jair: normal AT LEFT WITH MOVE
#   - show deuzi: angry AT RIGHT FLIP
#   - deuzi says: Not so fast!
#   - show jair: normal WITH CUT FLIP
#   - jair says: Uh oh.
#   - deuzi says: Where do you think you're going? There's a lot more to say about the setup!
#   - jair says: Your pet student is smart enough to get it without my help. I'm just wasting their time, really.
#   - deuzi says: What? Do you agree with that?
#   - choice:
#     - Yeah, it does look easy:
#       - deuzi says normal: Alright, I guess you can continue with more advanced lessons then...
#       - jair says happy: See, told you not to treat 'em like a baby.
#       - deuzi says angry: Shut up, you! We'll have a talk later.
#       - hide jair: WITH FADE
#       - deuzi says normal: Ok, the next lesson starts soon, maybe you should save and rest before moving on.
#       - deuzi says: It's going to be long, but it'll probably be easy for you.
#       - deuzi says happy: And the teacher is great! She's my best friend.
#       - deuzi says: Good luck!
#       - hide deuzi: WITH FADE
#       - scene: writingTheStory
#     - We barely saw the first part!:
#       - deuzi says: Come back here you ratbag, and finish the lesson!
#       - deuzi says: Let's get back to morning.
#       - show school_morning: WITH FUSION
#       - jair says: Ok boss, don't worry.
#       - hide deuzi: WITH FADE
#   - jair says angry: What a snitch.
#   - jair says normal: Anyway, let's see the next part then.
#   - jair says: Characters.
#   - jair says: The characters are... you know what a character is, come on.
#   - show setupch: AT 400,300 WITH FADE
#   - jair says: Ok so, inside the characters tag, each character is declared after its own tag.
#   - jair says: Same as the backgrounds, this tag will be used to refer to this character on the text of your story.
#   - jair says: Every time you need to use Deuzilene, you will use her tag, deuzi.
#   - jair says: Characters also have a display name, that's the name that will appear on the name box when we talk.
#   - jair says: The display name can have whitespaces, accents and whatever you want, go crazy.
#   - jair says: If you omit it, the tag will be used as the name.
#   - jair says: The speech colour is the colour to write the name in the name box.
#   - jair says: And then you have a list of looks.
#   - jair says: A look is an image representing a state of the character. For example, you could have a different look for each emotion or outfit they will wear.
#   - jair says: You always need a normal look, that will be the default look for the character.
#   - jair says: And you can have as many additional looks as you want.
#   - jair says: Deuzi here can be happy or angry.
#   - jair says happy: Her range of emotions is infinite, though.
#   - jair says normal: Believe me.
#   - jair says: Go ahead and check what assets you have in the tutorial pack for the characters.
#   - jair says: There are about six images per character, that is, six looks. The names of the files should give you a clue about what they contain.
#   - jair says: Try to add a new character with all the available looks. For example, me.
#   - jair says: And then you can go to the story and change the deuzi tag for the new character tag.
#   - jair says: That way you'll see the new character when you re run the game.
#   - jair says: Did you manage to do it?
#   - choice:
#     - Yes, easy-peasy:
#       - jair says angry: I told you it was easy, why am I wasting my time here!
#     - I think something went wrong:
#       - jair says: If the game suddenly stops working after you make some changes, it's probably because you made a mistake.
#       - jair says: It happens, and it's inevitable. What you can do to make your life easier is to just go adding changes slowly.
#       - jair says: Every time you make a change, you test that the game is still working.
#       - jair says: That way, when you do break something, it will be easier to identify where.
#       - jair says: And you can double check your work.
#       - jair says: But do you want to know what's the most common problem?
#       - jair says angry: I don't care if you don't wanna know, I'll tell you anyway.
#       - jair says normal: It's either indentation or typos. That's it. Check your whitespaces and your orthography, and stop crying.
#       - jair says: I'll wait here until you manage to add a character.
#       - choice:
#         - I did it!:
#           - jair says happy: That wasn't so hard, wasn't it?
#   - jair says normal: Anyway...
#   - hide setupch:
#   - jair says: Next up is cgs.
#   - show setupcgs: 400,350 WITH FADE
#   - jair says: CGs stands for Computer Graphics.
#   - jair says: It's an image that you can display and animate.
#   - jair says angry: It should have a better name, I know.
#   - jair says: But for now, it's what we have.
#   - jair says normal: Same as always, you have the cgs tag, and then each cgs has a tag and an image file.
#   - jair says: The quickstart already comes with a cgs, tagged as phone1.
#   - jair says: And if you check the pack, there's probably another one, somewhere. Why don't you find it?
#   - jair says: Adding it to the setup should be pretty easy. Tag and file.
#   - hide setupcgs:
#   - jair says: Now, let's see how these phones looks like. Could one of them be mine?
#   - show phone1: AT 600,300 CONTINUE
#   - show phone2: AT 380,300
#   - jair says: I don't think so! They're too girly.
#   - hide phone1: CONTINUE
#   - hide phone2:
#   - jair says: The last essential part of the setup is audio.
#   - show setupaudio: AT 400,350
#   - jair says: "You can see there are two tags here: music and sfx, which stands for sound effect."
#   - jair says: As with the cgs, you only need tag and file. But the files here will be, obviously, audio files.
#   - jair says: The difference between music and sfx is that the music will usually be looped, while the sfx will play just once.
#   - jair says: For example, in the Quickstart setup there is a morningBGM, background music.
#   - jair says: Coincidentally, it's what you're hearing right now. If enough time passes, you will hear the song finish, and start again. 
#   - jair says: There is also an SFX, called ringtoneSFX. You'll want to play it when something special happens.
#   - hide setupaudio:
#   - jair says: For example, let's make a phone call and check the ringtone...
#   - show phone1: AT 400,300 CONTINUE
#   - play ringtoneSFX:
#   - text: Tururu Ruru Ruru Ruruuuu...
#   - jair says happy: This has to be Deuzi's.
#   - show deuzi: angry AT RIGHT WITH FADE FLIP
#   - deuzi says: Hey! That's my phone!
#   - hide phone1: WITH FADE CONTINUE
#   - hide deuzi: WITH FADE
#   - jair says: I knew it!
#   - jair says normal: Anyway, that's it, lesson over.
#   - jair says: There is more to tell about the setup, actually, but for now, you have enough tools to start.
#   - jair says: You should now know how to add Backgrounds, Characters, CGS and Audio to a game.
#   - jair says: If you're not tired yet, you can go straight to the next class. 
#   - jair says: But remember to take breaks every now and then. You can save and load games easily from the Quick Menu in the corner.
#   - jair says happy: I guess Deuzi already told you everything about it though.
#   - jair says: She's a bit overbearing, but she means well.
#   - jair says normal: Anyway, I'll see you later, probably. And don't get lost, your next class is over there!
#   - hide jair: WITH FADE
#   - show school_afternoon: WITH FUSION
#   - scene: writingTheStory

# writingTheStory:
#   - show liz: normal WITH FADE
#   - liz says: Hi! I'm Liz and I'll be your writing mentor.
#   - liz says: Here we'll see how to actually write the story.
#   - liz says happy: Are you ready!?
#   - call SHOWTITLE: 
#     title: Lesson 3
#     subtitle: Writing Part 1
#   - liz says normal: First thing you need to know about a story is that it's divided in scenes.
#   - liz says: Each scene is a list of actions that will be executed from first to last.
#   - liz says: Inside a scene you can show backgrounds, characters, make them talk, show choices, call other scenes, and much more.
#   - liz says: The scenes are all contained in the file Story.yaml. But you can have as many story files as you want.
#   - liz says: Each scene has a tag name. This name can't have whitespaces, but apart from that it can be anything you want.
#   - liz says: Another important thing is that you always need a scene called start.
#   - liz says: That will be, of course, the starting scene.
#   - liz says happy: Really easy, don't you think?
#   - liz says normal: So, let's see the contents of a scene, the story actions.
#   - show liz: AT RIGHT WITH MOVE
#   - show lessonSceneStart:
#   - liz says: This is the 'start' scene of the Quickstart game.
#   - liz says: First thing we do is play music.
#   - liz says: Notice the dash symbol. That dash indicates that this is a single action.
#   - liz says: Every action starts with a dash, and has two main parts separated by a colon, the definition and the parameters.
#   - liz says: An action can omit the parameters part, in which case, you simple leave the right side of the action empty.
#   - liz says happy: Still, the colon is important. This first action, 'play', is an example of that.
#   - liz says normal: This action will play the music with tag 'morningBGM', no other information is needed.
#   - liz says: As you should have seen already with Jair, the file associated with this tag has to be declared in the setup file.
#   - liz says: The next line is another action, notice the starting dash.
#   - liz says: This one shows the background whose tag is 'room'. 
#   - liz says happy: You will see your room soon enough, don't worry!
#   - liz says normal: Showing the background takes some additional parameters.
#   - liz says: The uppercase text WITH is a special word to indicate a transition.
#   - liz says: And 'FADE' is the name of that transition.
#   - liz says: A transition is the way in which we can show or hide images, like backgrounds, characters or cgs.
#   - liz says: For example, if you want to show an image immediately, you can use the transition CUT.
#   - liz says: And if you want them to slowly become visible, you can use FADE.
#   - liz says: Or maybe you want a character to appear from the side of the screen. That's what MOVE is for.
#   - liz says: There are a few transitions included with RenJS, like 'CUT', 'FADE', 'FUSION', 'MOVE', 'FADETOBLACK' and 'FADETOWHITE'.
#   - liz says happy: But it's also possible to add new transitions to use, as plugins.
#   - liz says normal: Besides the transition, there's another key word in this line, 'CONTINUE'.
#   - liz says: We'll see later what this key word does. For now, let's continue.
#   - liz says: The next line is also a show action, but the tag belongs to a character.
#   - liz says happy: Deuzilene, my best friend!
#   - liz says normal: When showing a character, you might want to use a few extra parameters.
#   - liz says: The first additional parameter is her look. She's happy to welcome you!
#   - liz says: If you omit the 'look' parameter, then the normal look for the character will be shown.
#   - liz says: Also, notice another special word AT, used to designate the position.
#   - liz says: The position can be 'LEFT', 'CENTER', 'RIGHT', or it can be a coordinate like '200,200'. You can also add your own special positions to the game.
#   - liz says: The transition, as with the background, is FADE.
#   - liz says: Finally, the next line is Deuzi welcoming you. The extra parameter is the text that will be displayed in the message box.
#   - liz says: If you played the Quickstart already, you can probably tell there's a difference between the text here and what you see in the game.
#   - liz says: The text in the script can have style tags surrounding words or phrases. The style will be applied, and the tags will not show.
#   - liz says: This allows you to change a bit how the text will be shown in the message box, in a very easy way.
#   - liz says: 'In the Quickstart example, the words "the Quickstart" have the style (bold)bold(end).'
#   - liz says: Other styles that you can use are (italic)italic(end) and (color:#f593e6)color(end)!
#   - liz says: Just with these three options, you can add a lot of personality to your dialogs and text.
#   - liz says: The wait action will do just that, wait for the specified amount of time, in milliseconds, and then continue the story.
#   - liz says: The next line is another 'say' action, but it has an extra parameter in the left part.
#   - liz says: When you're writing a visual novel, it's normal for the characters to show facial expressions.
#   - liz says: And you'd want to use them often. You can change the expression, or look, with a show action.
#   - liz says: But you can also change it quickly during dialogue by adding the look tag to the 'say' action, like in this line.
#   - liz says happy: This way your script will look much more fluid.
#   - hide lessonSceneStart:
#   - liz says normal: So, with just these sentences you can show backgrounds, characters and make them talk.
#   - liz says: But how do we hide them?
#   - liz says: Easily! Just hide them! That is, instead of writing 'show', you write 'hide'.
#   - show lessonSceneHide:
#   - liz says: In this example scene Jair is trying to annoy Deuzilene once again.
#   - liz says angry: He has her phone!
#   - liz says normal: On the second line, a cgs with 'phone1' tag, is shown.
#   - liz says: As the cgs are smaller than characters, we need a specific coordinate to place them on the screen.
#   - liz says: We use the special word AT again, but this time, with the coordinates.
#   - liz says: Next we play the phone's ringtone, an SFX tagged as 'ringtoneSFX'.
#   - liz says: To visually show the phone is ringing, we show its onomatopoeia.
#   - liz says: As no character is speaking, the 'text' action is used instead.
#   - liz says: Then Deuzilene comes to rescue her phone!
#   - liz says: Can you notice something different when Deuzi appears this time?
#   - liz says: That's right, there's another parameter here, FLIP.
#   - liz says: Sometimes we need our characters to face the other way.
#   - liz says: Depending on the way your characters look, it will be possible to just flip the image in the x axis to get that effect.
#   - liz says: And this is what the FLIP parameter does. You can flip the characters as many times as you want. But when you hide them, they will reset.
#   - liz says: Next in the story, Deuzi grabs her phone.
#   - liz says: Hiding it is really easy, as I said before. This action has again the CONTINUE parameter.
#   - liz says: CONTINUE will make it so the game will not wait until the last action is finished to start the new one.
#   - liz says: What this normally achieves, is that it will look like the two actions, the one with CONTINUE, and the next one, are executed at the same time.
#   - liz says: The next action in this example is hiding Deuzilene, so both the phone and her will disappear at the same time.
#   - liz says: With this parameter, CONTINUE, you can show two characters at the same time, or show one while the other one leaves, and many more combinations.
#   - liz says: Let's hide this lesson now.
#   - hide lessonSceneHide:
#   - show liz: AT CENTER WITH MOVE
#   - liz says: One last thing about hide. Sometimes you will want to hide everything, for example, before changing a scene.
#   - liz says: You can do it easily by using the special word ALL, as the subject in the left side of the action.
#   - liz says: As with any other hide action, you can still specify the transition to use.
#   - liz says: And the result will be everything in the screen, characters, background, cgs, will be hidden.
#   - liz says: So that's it for today. You must be really tired after studying the whole day.
#   - liz says happy: See you tomorrow for part 2!
#   - stop morningBGM: WITH FADE
#   - hide ALL: WITH FADE
#   - scene: interval

# interval:
#   - play cicadas: WITH FADE
#   - show room_night:
#   - show room_night_light: WITH FUSION
#   - show deuzi: normalC WITH FADE
#   - deuzi says: Hey! I knew I was going to find you here.
#   - deuzi says: Were you going to sleep already?
#   - deuzi says: I know you're new in town, so I thought I could show you around a bit.
#   - deuzi says: What do you think?
#   - interrupt 6:
#     - Isn't it a bit awkward???:
#       - deuzi says angryC: What do you mean?
#       - deuzi says: Because I'm your teacher?  
#       - deuzi says happyC: We're almost the same age!
#       - deuzi says normalC: You might be teaching some years from now too. 
#       - deuzi says angryC: Then you'll see how awkward it is to be called professor and be treated like and old person.
#       - deuzi says normalC: Anyway, as I was saying...
#   - deuzi says: You probably know it already, but this is a small town.
#   - deuzi says: There's not much to see, really.
#   - deuzi says: But the cool kids all get together outside the store.
#   - deuzi says: Have you been there already?
#   - deuzi says: You can't miss it.
#   - deuzi says: So, ready to go?
#   - deuzi says happyC: Let's go!
#   - hide ALL: WITH FADE
#   - scene: storeAtNight

# storeAtNight:
#   - play storeBGM:
#   - show store: 
#   - show liz: happyC WITH FADE
#   - liz says: Deuzi!!! Over here!
#   - show liz: happyC AT 500,600 WITH MOVE
#   - show deuzi: happyC AT 300,600 WITH FADE CONTINUE
#   - show jair: happyC AT LEFT WITH FADE FLIP
#   - deuzi says: Liz! How are you?
#   - liz says normalC: Great! I just got here and was wondering where you were.
#   - deuzi says normalC: I stopped by the dorms to get my new student, and show them around.
#   - jair says: You should stop acting like a mama duck to your students.
#   - show deuzi: angryC WITH CUT FLIP
#   - deuzi says: Are you jealous cause you're not getting all the attention now?
#   - jair says angryC: Yeah, right...
#   - show marco: normalC WITH FADE AT RIGHT
#   - marco says: You two fighting again?
#   - liz says happyC: Seems like a normal day.
#   - show deuzi: angryC WITH CUT FLIP
#   - deuzi says: Hey! You're supposed to be on my side.
#   - deuzi says: He started it!
#   - show liz: normalC WITH CUT
#   - deuzi says normalC: Anyway, good to see you Marco.
#   - jair says happyC: Yes, what's the special occasion that made you crawl out of your hole.
#   - marco says happyC: Have to get some food before it starts raining.
#   - liz says angryC: What do you mean by rain? It's a beautiful night!
#   - effect FLASHIMAGE:
#     screenShake: true
#     image: thunder
#     sfx: thunderSFX
#   - marco says: I better hurry. Bye!
#   - show marco: AT OUTRIGHT WITH MOVE
#   - hide marco: WITH CUT
#   - deuzi says: Maybe we should go too, before...
#   - ambient RAIN:
#   - jair says: I knew something weird was going to happen when I saw that guy.
#   - deuzi says: How could this happen so suddenly?
#   - liz says normalC: Well, it's rather easy.
#   - liz says: Ambients and effects.
#   - jair says: Come on! Not on the streets!
#   - show liz: angryC CONTINUE WITH CUT
#   - show deuzi: angryC WITH CUT FLIP
#   - deuzi says: That's it! You and I are going to have a serious talk!
#   - jair says happyC: If you can catch me!
#   - show jair: happyC WITH CUT FLIP
#   - show jair: AT OUTLEFT WITH MOVE CONTINUE
#   - show deuzi: AT OUTLEFT WITH MOVE
#   - liz says happyC: I know how that's going to end.
#   - liz says normalC: As I was saying, ambient changes are really easy to make, and they will give your story a great mood.
#   - liz says: Let me show you.
#   - show ambientAndEffects: AT 400,350
#   - liz says: Ambients are audiovisual effects that persist through time.
#   - liz says: Like rain, snow or cherry blossoms falling.
#   - liz says: "You call them using the action 'ambient', followed by the ambient name."
#   - liz says: There's a few ambients ready to use.
#   - liz says: "'RAIN', 'SNOW' and 'SAKURA'."
#   - liz says: To stop an ambient you call a special ambient called 'CLEAR', the same way you call the other ones.
#   - ambient CLEAR:
#   - liz says happyC: And the rain stops!
#   - liz says: Finally!
#   - liz says normalC: Effects are audiovisual effects that get played just once.
#   - liz says: As with the ambients, there are a few readily available to use.
#   - effect SHAKE:
#   - liz says: "'SHAKE', a screen shake!"
#   - liz says: The thunder from before was also an effect, called FLASHIMAGE.
#   - liz says: "'FLASHIMAGE', will flash an image very quickly, accompanied by a sound effect and a screen shake too, if you want."
#   - liz says: Another handy effect is ROLLINGCREDITS, that takes a list of text lines as parameter.
#   - liz says: And shows them as rolling credits from a film.
#   - liz says happyC: You will see them in action at the end of the game!
#   - liz says normalC: With just these available options you can already do a lot, but you can also add new effects and ambients as Plugins.
#   - liz says: One last thing about this subject.
#   - hide ambientAndEffects:
#   - show setupExtraAssets:
#   - liz says: The resources used by the effects and ambients should be declared in the setup file. For example, the spritesheet for the sakura petals.
#   - liz says: You already know where to put the sfx, but to add extra images and spritesheets to the setup file, you have a special tag.
#   - liz says: The extra tag in the setup file is separated itself into the types of asset, for example, 'image' for images, and 'spritesheets' for spritesheets.
#   - liz says: For the image, simply add tag and path, same as the cgs. 
#   - liz says: But for the spritesheets, you will need to add also the dimensions of each frame, after the file path.
#   - liz says: For example, the sakura petals is a spritesheet with 5 frames of 17x26 pixels. 
#   - liz says: You can find all of these assets in the tutorial asset pack. Why don't you add them to the quickstart and play a bit with it?
#   - hide setupExtraAssets:
#   - liz says happyC: And that's pretty much it.
#   - show marco: normalC AT LEFT WITH FADE
#   - marco says: Where you under the rain all this time?
#   - liz says normalC: It's ok, I like the rain.
#   - liz says: Did you get your dinner?
#   - marco says happyC: I got some things for cooking. Do you want to come over?
#   - liz says: Really? All right, let's go.
#   - liz says normalC: By the way, this is Marco, he'll be teaching you about code and branches tomorrow.
#   - marco says normalC: Hi, new kid!
#   - liz says: Do you think you can find your way back to the dorms by yourself?
#   - choice:
#     - Yes, no problem:
#       - liz says: Ok, then I guess I'll see you tomorrow, don't be late!
#     - Sure:
#       - liz says: Ok, then I guess I'll see you tomorrow, don't be late!
#   - hide ALL:
#   - scene: backToTheRoom

# backToTheRoom:
#   - play cicadas: WITH FADE
#   - show room_night:
#   - show room_night_light: WITH FUSION  
#   - text: Your day was very tiring, but you're closer to be a visual novel writer. Tomorrow is going to be another long day, you better rest.
#   - show room_night: WITH FUSION
#   - wait: 400
#   - hide ALL:
#   - scene: day2

# day2:
#   - play morningBGM:
#   - show school_morning: WITH FADE CONTINUE
#   - show deuzi: happy AT CENTER WITH FADE
#   - deuzi says: Welcome back!
#   - deuzi says: How was your first night away from home?
#   - deuzi says normal: Are you ready for today's lessons?
#   - deuzi says: I'll let you to it.
#   - hide deuzi: WITH FADE
#   - show liz: WITH FADE
#   - liz says: Good morning!
#   - liz says: Let's start right away.
#   - call SHOWTITLE: 
#     title: Lesson 4
#     subtitle: Writing Part 2
#   - liz says: Today we're going to see a very important part of writing interactive fiction.
#   - liz says happy: Interactivity!
#   - liz says normal: That is, how to let your players make choices that affect the story.
#   - liz says: The most straightforward way of doing this is presenting a list of choices for the player to make.
#   - liz says: Have you seen something like that in this game?
#   - choice:
#     - Yes, Deuzi asks a lot of questions:
#       - liz says happy: She does!
#     - I don't think so:
#       - liz says angry: Was your head in the clouds? There were choices all over these lessons.
#       - liz says: This just now was a list of choices and you clicked on one.
#   - liz says normal: "Let's see an example:"
#   - show lessonChoice:
#   - liz says: This part of the story is really recent.
#   - liz says: I asked you something.
#   - liz says: And you could have chosen between two different options.
#   - liz says: That is achieved with the action 'choice'.
#   - liz says: This action then takes a list of choices, indented by two spaces, and starting each with a dash.
#   - liz says: Your choices here were 'Yes, Deuzi asks a lot of questions' and 'I don't think so'.
#   - liz says: Inside each option, indented too by two spaces from the choice text, there's a new list.
#   - liz says: Those are the actions to execute if that option is chosen.
#   - liz says: And when those actions are finished, you return to the next action after the 'choice' tag.
#   - hide lessonChoice:
#   - liz says: Inside a choice you can do anything you do in a scene.
#   - liz says happy: Even showing more choices!
#   - liz says: But that could get out of hand really fast. Try not to nest more than two choices at a time.
#   - liz says normal: You learnt yesterday what a scene is, and now I'm going to show you how to change from one scene to the next.
#   - show lessonScene:
#   - liz says: This example shows a whole scene that can continue in two possible different scenes.
#   - liz says: To start another scene we use the action 'scene'. It takes an extra parameter, the name of the scene to be executed next.
#   - liz says: That means the order you write the scenes or place them in the file has nothing to do with the actual execution.
#   - liz says: And that also means that you have to explicitly call the next scene when the current one ends.
#   - liz says: We can see here that the game will continue in different paths depending on what choices the player makes.
#   - liz says: When you change the scene, all the remaining actions from the previous scene, if any, are discarded.
#   - liz says: So if the player picks the phone up and then chooses to go to the party, the scene will change immediately to 'partyScene'. 
#   - liz says: And if she doesn't attend the call or chooses not to go, the scene will continue until the end and change to 'dormsScene'.
#   - hide lessonScene:
#   - liz says happy: Remember you can always say no to invitations, don't fall for peer pressure.
#   - liz says normal: There's another way of making a choice.
#   - liz says: Visual choices.
#   - liz says: With visual choices instead of using a text line, each option is an image you have to click.
#   - liz says: Let's see it in action.
#   - visualchoice:
#     - phone1 AT 620,300:
#       - play ringtoneSFX:
#       - text: Tururu Ruru Ruru Ruruuuu
#       - liz says: You chose the pink phone.
#     - phone2 AT 180,300:
#       - play ringtoneSFX2:
#       - text: Pi Pi Ri Pi Ripi Pi Ri
#       - liz says: You chose the light blue phone.
#   - liz says happy: Really interesting, right?
#   - show liz: normal AT LEFT WITH MOVE FLIP
#   - liz says: Then let's see how to do it.
#   - show lessonVisualChoice:
#   - liz says: It's similar to the normal choices, but the text has the information to show the images.
#   - liz says: First the tag of the image, and then the position.
#   - liz says: The image has to be declared in the setup file, in the extra section, or as is the case for these two images, as cgs.
#   - liz says: And that's it!
#   - hide lessonVisualChoice:
#   - liz says happy: There's a few more things about choices, but we'll see them after your next lesson.
#   - show marco: normal AT CENTER WITH FADE
#   - liz says: And here is your professor for it!
#   - marco says happy: Hey Liz, what are you doing here? I have a lesson now.
#   - marco says normal: Am I too early?
#   - liz says normal: Oh no, it's...
#   - marco says: Too late?
#   - marco says worry: Is it the wrong day?
#   - marco says: Again?
#   - liz says happy: It's ok, it's the right day and time... And place.
#   - marco says happy: Great!
#   - marco says normal: Ok, so you have to open the file...
#   - liz says: Wait, wait, wait!
#   - liz says normal: You have to introduce yourself first! Come on, Deuzi told you about these things.
#   - liz says: And don't forget to say what the lesson is about either!
#   - marco says worry: Sorry!
#   - wait: 600
#   - marco says happy: There! I won't forget again. I'm making a protocol for coming to class, see?
#   - liz says: Really? A protocol?
#   - liz says: Didn't think it could be so complicated... What's on it?
#   - marco says normal: Well, first, getting out of bed and washing my face.
#   - marco says: Then, coming the right day at the right time is really important.
#   - marco says happy: And now I've added saying my name and state my lesson summary for the students.
#   - liz says: That's very thorough.
#   - liz says happy: Ok, I don't want to disrupt your protocol too much, so I'll let you keep going.
#   - liz says normal: Good luck!
#   - liz says happy: To the both of you!!!
#   - hide liz: WITH FADE
#   - scene: lessonStoryFlux

# lessonStoryFlux:
#   - marco says normal: All right, so, as I've gotten out of bed, washed my face and came here on the right day at the right time.
#   - marco says: Now I can tell you.
#   - marco says happy: Hi! My name is Marco, and I'll be teaching you about logic and variables.
#   - call SHOWTITLE: 
#     title: Lesson 5
#     subtitle: Story Flux
#   - marco says normal: This is lesson 5 of the course, that means you should already know about choices.
#   - marco says: That's one way of changing the course of your story.
#   - marco says: But some of our actions take a long time before they reflect on the outcome of our story.
#   - marco says: That means that sometimes during the story you will need to keep record of the player's decisions.
#   - marco says: What and how, exactly, is up to you.
#   - marco says: RenJS allows you to save information with the action 'var'.
#   - marco says: Its name comes from the word variable, since it's a value that can change.
#   - marco says: Let's see an example of what you can do with this action.
#   - show marco: AT RIGHT WITH MOVE
#   - show lessonVarsNumeric:
#   - marco says: Let's start with the easiest of the variable types, numbers. 
#   - marco says: This kind of action is often called an assignation.
#   - marco says: It assigns a value to a variable.
#   - marco says: "We can say an assignation has two parts: left and right."
#   - marco says: In our case, the parts are separated by a colon.
#   - marco says: The left part contains the variable name.
#   - marco says: And the right part contains the value that will be assigned.
#   - marco says: This value can be the raw data, a number like 0, 5 or 17.
#   - marco says: Or we can make an operation combining numbers and other variables in an operation.
#   - marco says: To use the value of a variable in the right part, we have to surround its name with curly braces.
#   - marco says: That way we are saying we need to go and find the value of those variables, replace them in the operation.
#   - marco says: And then resolve it.
#   - marco says: The first variable 'score' is assigned the number 0 directly.
#   - marco says: Same with the variable 'extraPoints'.
#   - marco says: The third line assigns again a value to the variable 'score'.
#   - marco says: The old value is lost, and the new one will replace it.
#   - marco says: The new value is a summation between the old value and 10.
#   - marco says: "First it evaluates the value of 'score' and then it resolves: 0 + 10 = 10"
#   - marco says: In this way, we can make almost any arithmetical operation we want.
#   - marco says: "The marks allowed in this operations are:"
#   - marco says: " '+' is used for addition."
#   - marco says: " '-' is for subtraction."
#   - marco says: " '*' is for multiplication."
#   - marco says: " '/' is for division."
#   - marco says: And you can also use parentheses to make more complicated operations, like assigning something to 'totalScore'.
#   - marco says: One last thing to pay attention to is...
#   - marco says: Most of the values on the right side are between inverted commas.
#   - marco says: That's because the parser, the program that reads each line and decides what it means...
#   - marco says: "gets nervous when special characters like + & / etc appear on a line."
#   - marco says: So you have to use the inverted commas to let it know it's all one valid line.
#   - hide lessonVarsNumeric:
#   - marco says: Next type of variables are boolean.
#   - marco says: A boolean variable can take only one of two values, either true or false.
#   - marco says: These variables are useful to store flags of events.
#   - show lessonVarsBoolean:
#   - marco says: As with numeric variables, we can also assign an operations to the variables.
#   - marco says: The operations in this case are logical, and they have their own symbols to use.
#   - marco says: "The usual ones are:"
#   - marco says: "'!', which means 'not'. On the second line we assign the variable 'lightOff' with 'not lightOn'."
#   - marco says: " '&&' means 'and'. The variable 'allLightsOn' will be true only if both variables 'lightOn and lampOn' are true."
#   - marco says: " '||' means 'or'. The variable 'canRead' will be true if any of the variables 'lightOn or lampOn' are true."
#   - marco says: With just these symbols, including parentheses too, you can create really complex operations.
#   - hide lessonVarsBoolean:
#   - marco says happy: But there's yet another way to get a boolean value. One that mixes numbers with logic!
#   - marco says: Isn't it great!?
#   - show lessonVarsBooleanCont:
#   - marco says normal: Here we have some new symbols.
#   - marco says: "'>' greater than and '>=' greater or equal than."
#   - marco says: "'==' equal to."
#   - marco says: "'<' less than and '<=' less than or equal to."
#   - marco says: We use those symbols to compare numbers and or variables that contain numbers.
#   - marco says: So we can resolve that a 'highScore' means the 'score is greater than 10'.
#   - marco says: A 'perfectScore' is when 'score is equal to maxScore'. 
#   - marco says: And a 'lowScore' is when 'score is less than or equal to maxScore divided by two'.
#   - hide lessonVarsBooleanCont:
#   - marco says: The boolean operations are really important for the story, as you can use them to branch it. 
#   - marco says: There's a last type of variable. This one is really easy.
#   - show lessonVarsString:
#   - marco says: This is a character string, or more directly, a string.
#   - marco says: These variables store text.
#   - marco says: You can store text directly, or combine them with more text.
#   - marco says: The 'wholeName' variable will resolve to 'Mr. Marco Da Silva'.
#   - marco says happy: That's me!
#   - marco says normal: You can also show the content of any variable, not just strings, in any dialogue and text.
#   - marco says: Always by using the curly braces.
#   - hide lessonVarsString:
#   - marco says happy: And those are all the types of variables you need.
#   - marco says: Now we're going to see how we can use them to change the course of the story.
#   - marco says normal: For this we're going to use a new action, 'if'.
#   - marco says: This action allows you to execute orders only if a condition is met.
#   - show lessonIf:
#   - marco says: As you can see, after the 'if', the condition is between parentheses.
#   - marco says: A condition is nothing more than a boolean value. Anything that evaluates to true or false.
#   - marco says: So if you have a boolean variable like 'lightOn', we can use it as a condition.
#   - marco says: If that condition is true, the actions indented inside the if are executed. Just like with choices.
#   - marco says: After an 'if' action, we can have an 'else' action.
#   - marco says: This action is only to indicate what actions should be executed if the condition is false.
#   - marco says: The else can be omitted, but if you need it, it should be immediately after the actions of the 'if'.
#   - hide lessonIf:
#   - marco says happy: Let's see something a bit more complex.
#   - show lessonIfCont:
#   - marco says normal: On this example we can see the condition as a logical operation. 
#   - marco says: If that condition is met, we encounter a second 'if'.
#   - marco says: This is another operation, but the variables being compared are strings, not numbers.
#   - marco says: With strings, we use the '==' operator to check if they're equal.
#   - marco says: You can use the other operators too, but they're not so useful.
#   - marco says: Finally, we find an else, and here, we have to pay extra attention to the indentation.
#   - marco says: The else is just next to the second 'if', but it's on the same level of the first one.
#   - marco says: To which one do you think it belongs?
#   - choice:
#     - First 'if'!:
#       - marco says happy: Correct!
#     - Second 'if?:
#       - marco says worry: Not really.
#   - marco says normal: The indentation level is what marks the right 'if' to pair it with. So that 'else' belongs to the first 'if'.
#   - hide lessonIfCont:
#   - show marco: normal AT CENTER WITH MOVE
#   - marco says: And that's all you need to know about logic and internal decisions in a story.
#   - marco says: The pieces are simple enough, but combine them and you can make really intricate systems.
#   - marco says happy: I love systems! They're so perfect!
#   - marco says worry: I really don't know if you have another class right now.
#   - marco says normal: But mine is over, so I'll leave.
#   - marco says happy: Bye!
#   - hide marco: WITH FADE
#   - scene: lastClass

# lastClass:
#   - show school_afternoon: WITH FUSION
#   - show deuzi: happy WITH FADE AT CENTER FLIP
#   - deuzi says: Hi! Did you have fun today?
#   - deuzi says normal: Marco's is one of the hardest, but once you learn it, it becomes a lot easier to write the stories just how you want them.
#   - deuzi says: One last lesson and you can start writing!
#   - deuzi says happy: For this lesson, I'll be your teacher.
#   - deuzi says: It'll be a lot of fun!
#   - call SHOWTITLE: 
#     title: Lesson 6
#     subtitle: GUI and Configuration
#   - deuzi says normal: So, a GUI, or Graphical User Interface , constitutes most of the look and feel of your story.
#   - deuzi says: The graphical elements of your story are the backgrounds, the characters and the cgs.
#   - deuzi says: We could say that anything else is part of the GUI.
#   - deuzi says: So, the menus, the text box where we show dialogue, the font of the texts, the buttons of the quick menu here in the corner.
#   - deuzi says: All of that is part of the GUI.
#   - deuzi says: The GUI is not exactly part of the story, but it's great to set the mood, to show the story's aesthetic.
#   - deuzi says: For example, a period drama and a cyberpunk story GUIs shouldn't look the same.
#   - deuzi says: Also, the GUI will depend on the image resolution used.
#   - deuzi says: A little pixel art game will need a specific GUI, and so would a big HD one.
#   - deuzi says: With RenJS we have an easy way to make the GUI look exactly the way we need.
#   - deuzi says: The configuration of the GUI happens inside the file 'GUI.yaml'.
#   - deuzi says: The file is quite self explanatory. There is a list of assets, with key and path.
#   - deuzi says: And a configuration section for each menu, with the images, buttons, animations and all other elements contained in them.
#   - deuzi says: There's also the 'HUD' configuration. HUD stands for head-up-display.
#   - deuzi says: This word is an acronym used in videogames to designate all the graphical meta elements that appear during the game play.
#   - deuzi says: In the case of a visual novel, that means the 'Quick Menu', here in the corner; the boxes for displaying messages, character names and choices.
#   - deuzi says: You can modify this file by hand to make up your GUI.
#   - deuzi says happy: But there's a much easier way!
#   - deuzi says: There's a tool called RenJS GUI Builder, that lets you create the GUI visually.
#   - deuzi says: With it, you can create the menus and the HUD by adding images, buttons and more and drag them to the right place.
#   - deuzi says normal: You can find a link to the RenJS GUI Builder down below.
#   - deuzi says: Once the GUI looks like you want, you can 'build it', and a skeleton for your game will be made.
#   - deuzi says: Including your GUI assets and configuration, along with a sample story and the RenJS library.
#   - deuzi says happy: Then you can add your story assets and start writing!
#   - deuzi says normal: And just in case you want to use this GUI, used by the tutorial game and the Quickstart...
#   - deuzi says: RenJS GUI Builder comes with it as an example. You can clone it and modify it or use it as it is.
#   - deuzi says: But there's some more things you can change to make your game look like you want.
#   - deuzi says: There are many configuration parameters you can change and play with.
#   - deuzi says: For example, you already know that when showing characters in a particular position, you need to use the keyword AT.
#   - deuzi says: Then, you can use either a coordinate in the screen, or the special positions LEFT, CENTER and RIGHT.
#   - deuzi says: These three positions, and some others, are in the Config.yaml file.
#   - deuzi says: You can change the values for any of these positions, and you can also add more.
#   - deuzi says: For example, if your game has a player portrait, you might want to add a special PORTRAIT position to place those images.
#   - deuzi says: Let's see what this file can contains.
#   - deuzi says: "As with the other yaml files, the options are each a line or hierarchy with key:value, and indentation is important."
#   - show deuzi: AT RIGHT WITH MOVE CONTINUE
#   - show lessonConfigPosition: AT 200,300
#   - deuzi says: The first tag, and maybe most important, is the positions.
#   - deuzi says: These are the special positions you will have available while writing the game.
#   - deuzi says: They depend on the dimensions of the game, since they are expressed in pixels.
#   - deuzi says: There are five positions configured on the Quickstart game, but you can add as many as you want.
#   - deuzi says: One thing to take into account is that character sprites have the 'zero coordinate' in the middle bottom of the image.
#   - deuzi says: And this is what these values will positions in screen.
#   - deuzi says: So you can see, the CENTER position x is the middle of the screen, but the y is at the bottom. 
#   - deuzi says: This will position the characters with their feet on the ground, in the middle of the screen.
#   - deuzi says: 'The other position are what you expect:'
#   - show lessonPositionExample:
#   - show deuzi: AT CENTER WITH MOVE
#   - deuzi says: This is the CENTER position, and there's also an OUTLEFT, that is, outside of the screen on the left side.
#   - show deuzi: AT OUTLEFT WITH MOVE
#   - deuzi says: Like this!
#   - show deuzi: AT OUTRIGHT WITH CUT
#   - deuzi says: These positions are really handy when you want to...
#   - show deuzi: AT RIGHT WITH MOVE
#   - deuzi says: Make a character enter or leave the screen gracefully.
#   - hide lessonPositionExample:
#   - deuzi says: And as I said before, if you want to simply add another special position specific to your game, here is where you can add it.
#   - hide lessonConfigPosition:
#   - deuzi says: Next option is 'transitions'.
#   - show lessonConfigTransition: AT 300,300
#   - deuzi says: You already know a bit about transitions, it's the way to show or hide characters, backgrounds or cgs.
#   - deuzi says: What you will be setting here, is what happens when you don't specify a transition in your show and hide actions.
#   - deuzi says: So, in this case, we are using the same behaviour for all the elements, FADE.
#   - deuzi says: That means that whenever I want to show or hide something using FADE, I will not need to write it.
#   - deuzi says: It will be the default behaviour. You can change this to any of the available transitions.
#   - deuzi says: Of course, you can still use any transition during the game, you will only have to write it in the action with the WITH keyword.
#   - deuzi says: And the same goes for showing and hiding parts of the GUI. The choices, either visual or text and even the menus themselves.
#   - deuzi says: You can also configure how the character look will transitions during a say action.
#   - deuzi says happy: You can play with these values and see how it looks!
#   - hide lessonConfigTransition:
#   - deuzi says normal: Finally, there are some other options to check.
#   - show lessonConfigTime: AT 300,300
#   - deuzi says: The option 'fadetime' means how much the FADE transitions will take, in milliseconds. 
#   - deuzi says: You can modify this value if you want faster of slower FADE and FUSION transitions.
#   - deuzi says: The skip and auto times set the waiting time for each action in their respective modes.
#   - deuzi says: For example, on auto play, when text is shown, with a 'text' or 'say' action, the game will wait for a moment before continuing.
#   - deuzi says: Skip mode is basically the same as auto play, but really really fast and skipping transitions.
#   - deuzi says: And logChoices lets you keep a track of the choices the player took.
#   - deuzi says: If they replay the game, the choices previously taken will be shown tinted in a different color.
#   - deuzi says: Maybe you don't want this behaviour, and you can do that by setting logChoices to false.
#   - deuzi says: And that's all there is to know about the story configuration file.
#   - hide lessonConfigTime:
#   - show deuzi: AT CENTER WITH MOVE
#   - deuzi says: Wow, that was longer than expected.
#   - deuzi says happy: But that completes the course.
#   - deuzi says: Now we need to hurry!
#   - hide ALL: WITH FADE
#   - scene: graduation
  
# graduation:
#   - show street_afternoon:
#   - show deuzi: AT 300,600 WITH FADE CONTINUE
#   - show liz: happy AT 500,600 WITH FADE CONTINUE
#   - show jair: happy AT RIGHT WITH FADE CONTINUE
#   - show marco: happy AT LEFT WITH FADE
#   - deuzi says: So, this is the big day.
#   - deuzi says: You can now go out in the world and write your own stories.
#   - deuzi says happy: I'm so proud of you!
#   - liz says: I'm looking forward to read all of your stories.
#   - jair says: Let's keep in touch!
#   - marco says: And don't be scared of making it complex!
#   - deuzi says: You can do it!
#   - effect ROLLINGCREDITS:
#     endGame: true
#     text:
#       - RenJS.V2 created by
#       - lunafromthemoon
#       - null
#       - In collaboration with
#       - RockDaFox
#       - Sean S. LeBlanc
#       - null
#       - Inspired by Ren'Py
#       - Powered by PhaserJS
#       - null
#       - null
#       - Thanks for playing
#       - The Tutorial Game
#       - null
#       - written by
#       - lunafromthemoon
#       - null
#       - background art and cgs by
#       - konett
#       - null
#       - characters by
#       - Shida
#       - null
#       - music by
#       - Evan Schaeffer

# invitationScene:
#   - show phone2: AT 400,300
#   - play ringtoneSFX:
#   - jair says: Told you! It's probably Deuzilene trying to convince you to go to that party.
#   - choice:
#     - Pick up the phone:
#       - deuzi says: Hey! I'm glad you're not asleep yet! 
#       - deuzi says: There's this party tonight and I wanted you to come.
#       - deuzi says: So what do you say?
#       - choice:
#         - Sounds like fun!:
#           - scene: partyScene
#         - I'm really tired:
#           - deuzi says: Oh well, next time it is then. Have a good night!
#     - Let it ring:
#       - jair says: Brutal! You ain't even picking up.
#   - scene: dormsScene

# varsScene:
#   # numeric variables
#   - var score: 0
#   - var extraPoints: 3
#   - var score: "{score} + 10"
#   - var bonus: "{extraPoints} - 1"
#   - var totalScore: "({score} + {extraPoints}) * {bonus}"
#   # boolean variables
#   - var lightOn: true
#   - var lightOff: "!{lightOn}"
#   - var lampOn: true
#   - allLightsOn: "{lightOn} && {lampOn}"
#   - canRead: "{lightOn} || {lampOn}"
#   - highScore: "{score} > 10"
#   - perfectScore: "{score} == {maxScore}"
#   - lowScore: "{score} <= {maxScore} / 2"
#   # string variables
#   - var name: Marco
#   - var surname: Da Silva
#   - var wholeName: "Mr. {name} {surname}"
#   - text: "Hello {wholeName}, your score is {score}!"
#   # if
#   - if ({lightOn}):
#     - text: The light is on.
#   - else:
#     - text: The light is off.
#   - deuzi says: Let's check your score.
#   - deuzi says: "You have {score} points."
#   - if ({score} > 10):
#     - show deuzi: happy
#     - deuzi says: You did great! Congratulations!
#     - if ({name} == {favouriteStudent}):
#       - deuzi says: That's why you're my favourite student.
#   - else:
#     - deuzi says: It's not bad, but you'll have to study a bit more next time.
#     - call helloworld:
#       param1: hello
#       param2: world

